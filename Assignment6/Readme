Please open the given project folder as it is in your IDE.
You may want to install certain plugins to run the programs:
numpy,
pandas,
pip,
scikit-learn,
scipy,
sklearn,
matplotlib

Q1)
1.1) Question1.py -> code

1.2) An encoder takes an input, encodes it and transmits it across the network. While the decoder gets an input from the network and then decodes it back to get the original input. Neural networks can be used here that have identical input and output feature space. The hidden layer units can be viewed as various intermediate nodes along a network. Hence, from the encoder-decoder point of view, it is important to train this network so as to learn correct set of weights for each hidden unit, because in practice it is very important in encoder-decoder systems to get 100% accuracy.

1.3) Question1Output/AccuracyScore_NoOfHiddenUnits.png -> output 
As can be seen, even as we change the number of hidden layers, the output accuracy remains good. Hence we can still think of the network as an encoder-decoder

Q2)
Question2.2.1.py -> code for optimal decision stumps

Question2.2.2.py -> code for random decision stumps

Deliverables 1,2 -> Question2Output-> BreastCancer.png, BreastCancerRandom.png, Diabetes.png, DiabetesRandom.png, Spambase.png, SpambaseRandom.png
Deliverable3 -> As can be seen in the code, I selected the optimal value ’T’ by iterating over a range of values and computing accuracy for each. the value for ’T’ that first gave me a good accuracy, as selected as ’T’.
